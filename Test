---Auto Smite Developed by HeRoBaNd---
---Changelog---
---1.0 - Reliased For Bol---
---1.1 - Added AutoUpdater (Credit - Simple & HiranN & BF Team)---
---1.2 - 6.1 Updated---
---1.3 - Added SpellUsage---
local RangeSmite = 560
local serveradress = "raw.githubusercontent.com"
local scriptadress = "/HeRoBaNd/Scripts/master"
local LocalVersion = "1.1"
local autoupdate = false

if myHero:GetSpellData(SUMMONER_1).name:find("summonersmite") then Smite = SUMMONER_1 elseif myHero:GetSpellData(SUMMONER_2).name:find("summonersmite") then Smite = SUMMONER_2 end

PrintChat("<font color='#FF0000'><b>[HeRo Smite] </b></font>".."<font color='#00BFFF'><b>Loaded.</b></font>") 

if Smite ~= nil then 
PrintChat("<font color='#FF0000'><b>[HeRo Smite] </b></font>".."<font color='#00BFFF'><b>Smite found.</b></font>") 
else 
PrintChat("<font color='#FF0000'><b>[HeRo Smite] </b></font>".."<font color='#00BFFF'><b>Smite not found.</b></font>") 
return 
end

function OnLoad()
  FindUpdates()
	jungleMinions = minionManager(MINION_JUNGLE, RangeSmite, myHero, MINION_SORT_MAXHEALTH_DEC)
	HSMenuInit()
end

function HSMenuInit()
	HSMenu = scriptConfig("HeRo Smite", "HSSmite")
	
	HSMenu:addParam('Info', '-----------------------------------------------------', SCRIPT_PARAM_INFO, "-------------")
	
	HSMenu:addParam("SmiteActive", "Smite Active", SCRIPT_PARAM_ONKEYTOGGLE, true, string.byte("H"))
	HSMenu:addParam("UseSpells", "Use Spells", SCRIPT_PARAM_ONKEYTOGGLE, false, string.byte("N"))
	
	HSMenu:addParam("rangeSmite", "All Draw", SCRIPT_PARAM_ONOFF, true)
	
  HSMenu:addSubMenu("SpellUsage", "Spell Usage Settings")
		HSMenu.SpellUsage:addParam("UseQ", "Use Q", SCRIPT_PARAM_ONOFF, true)
		HSMenu.SpellUsage:addParam("UseW", "Use W", SCRIPT_PARAM_ONOFF, true)
		HSMenu.SpellUsage:addParam("UseE", "Use E", SCRIPT_PARAM_ONOFF, true)
		HSMenu.SpellUsage:addParam("UseR", "Use R", SCRIPT_PARAM_ONOFF, true)
		
	HSMenu:addSubMenu("Smite Monsters:", "smite")
		HSMenu.smite:addParam("SRUDragon", "Use Smite on: Dragon", SCRIPT_PARAM_ONOFF, true)
		HSMenu.smite:addParam("SRUBaron", "Use Smite on: Baron", SCRIPT_PARAM_ONOFF, true)
		HSMenu.smite:addParam("SRURazorbeak", "Use Smite on: Wraith", SCRIPT_PARAM_ONOFF, false)
		HSMenu.smite:addParam("SRUMurkwolf", "Use Smite on: Wolf", SCRIPT_PARAM_ONOFF, false)
		HSMenu.smite:addParam("SRUKrug", "Use Smite on: Krug", SCRIPT_PARAM_ONOFF, false)
		HSMenu.smite:addParam("SRUGromp", "Use Smite on: Gromp", SCRIPT_PARAM_ONOFF, false)
		HSMenu.smite:addParam("SRURed", "Use Smite on: Red Buff", SCRIPT_PARAM_ONOFF, true)
		HSMenu.smite:addParam("SRUBlue", "Use Smite on: Blue Buff", SCRIPT_PARAM_ONOFF, true)
    
   DelayAction(function() HSMenu:permaShow("SmiteActive") end, 5.0)
   DelayAction(function() HSMenu:permaShow("UseSpells") end, 5.0)
end

function GetSmiteDamage()
	local SmiteDamage
	if myHero.level <= 4 then
		SmiteDamage = 370 + (myHero.level*20)
	end
	if myHero.level > 4 and myHero.level <= 9 then
		SmiteDamage = 330 + (myHero.level*30)
	end
	if myHero.level > 9 and myHero.level <= 14 then
		SmiteDamage = 240 + (myHero.level*40)
	end
	if myHero.level > 14 then
		SmiteDamage = 100 + (myHero.level*50)
	end
	return SmiteDamage
end

function Spell()
	local Spell
	if myHero.charName == "Aatrox" then Spell = _Q end
	if myHero.charName == "Aatrox" then Spell = _E end
	if myHero.charName == "Akali" then Spell = _E end
	if myHero.charName == "Amumu" then Spell = _E end
	if myHero.charName == "Chogath" then Spell = _W end
	if myHero.charName == "Chogath" then Spell = _R end
	if myHero.charName == "Diana" then Spell = _Q end
	if myHero.charName == "Diana" then Spell = _R end
	if myHero.charName == "Evlynn" then Spell = _E end
	if myHero.charName == "Fiora" then Spell = _Q end
	if myHero.charName == "Fizz" then Spell = _Q end
	if myHero.charName == "Hecarim" then Spell = _Q end
	if myHero.charName == "Nunu" then Spell = _Q end
	return Spell
end

function GetDamageSpell()
	local SpellDamage
	
	if myHero.charName == "Aatrox" then
		QLevel = myHero:GetSpellData(_Q).level
	if QLevel == 1 then
		SpellDamage = 70 + (0.6*myHero.ad)
	elseif QLevel == 2 then
		SpellDamage = 115 + (0.6*myHero.ad)
	elseif QLevel == 3 then
		SpellDamage = 160 + (0.6*myHero.ad)
	elseif QLevel == 4 then
		SpellDamage = 205 + (0.6*myHero.ad)
	elseif QLevel == 5 then
		SpellDamage = 250 + (0.6*myHero.ad)
	end
	
		ELevel = myHero:GetSpellData(_E).level
	if ELevel == 1 then
		SpellDamage = 75 + (0.6*myHero.ap) + (0.6*myHero.ad)
	elseif ELevel == 2 then
		SpellDamage = 110 + (0.6*myHero.ap) + (0.6*myHero.ad)
	elseif ELevel == 3 then
		SpellDamage = 145 + (0.6*myHero.ap) + (0.6*myHero.ad)
	elseif ELevel == 4 then
		SpellDamage = 180 + (0.6*myHero.ap) + (0.6*myHero.ad)
	elseif ELevel == 5 then
		SpellDamage = 215 + (0.6*myHero.ap) + (0.6*myHero.ad)
	end
	end
	
	if myHero.charName == "Akali" then
		ELevel = myHero:GetSpellData(_E).level
	if ELevel == 1 then
		SpellDamage = 30 + (0.4*myHero.ap) + (0.6*myHero.ad)
	elseif ELevel == 2 then
		SpellDamage = 55 + (0.4*myHero.ap) + (0.6*myHero.ad)
	elseif ELevel == 3 then
		SpellDamage = 80 + (0.4*myHero.ap) + (0.6*myHero.ad)
	elseif ELevel == 4 then
		SpellDamage = 105 + (0.4*myHero.ap) + (0.6*myHero.ad)
	elseif ELevel == 5 then
		SpellDamage = 130 + (0.4*myHero.ap) + (0.6*myHero.ad)
	end
	end
	
	if myHero.charName == "Amumu" then
		ELevel = myHero:GetSpellData(_E).level
	if ELevel == 1 then
		SpellDamage = 75 + (0.5*myHero.ap)
	elseif ELevel == 2 then
		SpellDamage = 100 + (0.5*myHero.ap)
	elseif ELevel == 3 then
		SpellDamage = 125 + (0.5*myHero.ap)
	elseif ELevel == 4 then
		SpellDamage = 150 + (0.5*myHero.ap)
	elseif ELevel == 5 then
		SpellDamage = 175 + (0.5*myHero.ap)
	end
	end

	if myHero.charName == "Chogath" then
		RLevel = myHero:GetSpellData(_R).level
	if RLevel == 1 then
		SpellDamage = 1000 + (0.7*myHero.ap)
	elseif RLevel == 2 then
		SpellDamage = 1000 + (0.7*myHero.ap)
	elseif RLevel == 3 then
		SpellDamage = 1000 + (0.7*myHero.ap)
	end
	
		ELevel = myHero:GetSpellData(_E).level
	if ELevel == 1 then
		SpellDamage = 75 + (0.7*myHero.ap)
	elseif ELevel == 2 then
		SpellDamage = 125 + (0.7*myHero.ap)
	elseif ELevel == 3 then
		SpellDamage = 175 + (0.7*myHero.ap)
	elseif ELevel == 4 then
		SpellDamage = 225 + (0.7*myHero.ap)
	elseif ELevel == 5 then
		SpellDamage = 275 + (0.7*myHero.ap)
	end
	end
	
	if myHero.charName == "Diana" then
		QLevel = myHero:GetSpellData(_Q).level
	if QLevel == 1 then
		SpellDamage = 60 + (0.7*myHero.ap)
	elseif QLevel == 2 then
		SpellDamage = 95 + (0.7*myHero.ap)
	elseif QLevel == 3 then
		SpellDamage = 130 + (0.7*myHero.ap)
	elseif QLevel == 4 then
		SpellDamage = 165 + (0.7*myHero.ap)
	elseif QLevel == 5 then
		SpellDamage = 200 + (0.7*myHero.ap)
	end
	
		RLevel = myHero:GetSpellData(_R).level
	if RLevel == 1 then
		SpellDamage = 100 + (0.6*myHero.ap)
	elseif RLevel == 2 then
		SpellDamage = 160 + (0.6*myHero.ap)
	elseif RLevel == 3 then
		SpellDamage = 220 + (0.6*myHero.ap)
	end
	end
	
	if myHero.charName == "Evlynn" then
		ELevel = myHero:GetSpellData(_E).level
	if ELevel == 1 then
		SpellDamage = 35 + (0.5*myHero.ap) + (0.5*myHero.ad)
	elseif ELevel == 2 then
		SpellDamage = 55 + (0.5*myHero.ap) + (0.5*myHero.ad)
	elseif ELevel == 3 then
		SpellDamage = 75 + (0.5*myHero.ap) + (0.5*myHero.ad)
	elseif ELevel == 4 then
		SpellDamage = 95 + (0.5*myHero.ap) + (0.5*myHero.ad)
	elseif ELevel == 5 then
		SpellDamage = 115 + (0.5*myHero.ap) + (0.5*myHero.ad)
	end
	end
	
	if myHero.charName == "Fiora" then
		QLevel = myHero:GetSpellData(_Q).level
	if QLevel == 1 then
		SpellDamage = 65 + (0.55*myHero.ad)
	elseif QLevel == 2 then
		SpellDamage = 75 + (0.7*myHero.ad)
	elseif QLevel == 3 then
		SpellDamage = 85 + (0.85*myHero.ad)
	elseif QLevel == 4 then
		SpellDamage = 95 + (1*myHero.ad)
	elseif QLevel == 5 then
		SpellDamage = 105 + (1.15*myHero.ad)
	end
	end
	
	if myHero.charName == "Fizz" then
		QLevel = myHero:GetSpellData(_Q).level
	if QLevel == 1 then
		SpellDamage = 10 + (0.35*myHero.ap) +(myHero.ad)
	elseif QLevel == 2 then
		SpellDamage = 25 + (0.35*myHero.ap) +(myHero.ad)
	elseif QLevel == 3 then
		SpellDamage = 40 + (0.35*myHero.ap) +(myHero.ad)
	elseif QLevel == 4 then
		SpellDamage = 55 + (0.35*myHero.ap) +(myHero.ad)
	elseif QLevel == 5 then
		SpellDamage = 70 + (0.35*myHero.ap) +(myHero.ad)
	end
	end
	
	if myHero.charName == "Gragas" then
		ELevel = myHero:GetSpellData(_E).level
	if ELevel == 1 then
		SpellDamage = 80 + (0.6*myHero.ap)
	elseif ELevel == 2 then
		SpellDamage = 130 + (0.6*myHero.ap)
	elseif ELevel == 3 then
		SpellDamage = 180 + (0.6*myHero.ap)
	elseif ELevel == 4 then
		SpellDamage = 230 + (0.6*myHero.ap)
	elseif ELevel == 5 then
		SpellDamage = 280 + (0.6*myHero.ap)
	end
	end
	
	if myHero.charName == "Hecarim" then
		QLevel = myHero:GetSpellData(_Q).level
	if QLevel == 1 then
		SpellDamage = 40 + (0.4*myHero.ad)
	elseif QLevel == 2 then
		SpellDamage = 63.3 + (0.4*myHero.ad)
	elseif QLevel == 3 then
		SpellDamage = 86.7 + (0.4*myHero.ad)
	elseif QLevel == 4 then
		SpellDamage = 110 + (0.4*myHero.ad)
	elseif QLevel == 5 then
		SpellDamage = 133.3 + (0.4*myHero.ad)
	end
	end
	
	if myHero.charName == "Nunu" then
	QLevel = myHero:GetSpellData(_Q).level
	if QLevel == 1 then
		SpellDamage = 400
	elseif QLevel == 2 then
		SpellDamage = 550
	elseif QLevel == 3 then
		SpellDamage = 700
	elseif QLevel == 4 then
		SpellDamage = 850
	elseif QLevel == 5 then
		SpellDamage = 1000
	end
	end

	return SpellDamage
end

function OnTick()
	if myHero.dead then return end
	jungleMinions:update()
	CheckJungle()
end

function CheckJungle()
	if HSMenu.SmiteActive then
	for i, jungle in pairs(jungleMinions.objects) do
	if jungle ~= nil then
	if HSMenu.smite[jungle.charName:gsub("_", "")] then
		if myHero.charName == "Aatrox" or myHero.charName == "Akali" or myHero.charName == "Amumu" or myHero.charName == "Chogath" or myHero.charName == "Diana" or myHero.charName == "Evlynn" or myHero.charName == "Fiora" or myHero.charName == "Fizz" or myHero.charName == "Hecarim" or myHero.charName == "Nunu" and HSMenu.SpellUsage.UseQ then
	SmiteQMonster(jungle)
	elseif myHero.charName == "Aatrox" or myHero.charName == "Akali" or myHero.charName == "Amumu" or myHero.charName == "Chogath" or myHero.charName == "Diana" or myHero.charName == "Evlynn" or myHero.charName == "Fiora" or myHero.charName == "Fizz" or myHero.charName == "Hecarim" or myHero.charName == "Nunu" and HSMenu.SpellUsage.UseW then
	SmiteWMonster(jungle)
	elseif myHero.charName == "Aatrox" or myHero.charName == "Akali" or myHero.charName == "Amumu" or myHero.charName == "Chogath" or myHero.charName == "Diana" or myHero.charName == "Evlynn" or myHero.charName == "Fiora" or myHero.charName == "Fizz" or myHero.charName == "Hecarim" or myHero.charName == "Nunu" and HSMenu.SpellUsage.UseE then
	SmiteWMonster(jungle)
	elseif myHero.charName == "Aatrox" or myHero.charName == "Akali" or myHero.charName == "Amumu" or myHero.charName == "Chogath" or myHero.charName == "Diana" or myHero.charName == "Evlynn" or myHero.charName == "Fiora" or myHero.charName == "Fizz" or myHero.charName == "Hecarim" or myHero.charName == "Nunu" and HSMenu.SpellUsage.UseR then
	SmiteRMonster(jungle)
	else
	SmiteMonster(jungle)
				  end
			  end
			end
		end   
	end
end

function SmiteMonster(obj)
    local DistanceMonster = GetDistance(obj)
    if myHero:CanUseSpell(Smite) == READY and DistanceMonster <= RangeSmite and obj.health <= GetSmiteDamage() then
    CastSpell(Smite, obj)
    end
end

function SmiteQMonster(obj)
    local DistanceMonster = GetDistance(obj)
    if myHero:CanUseSpell(Smite) == READY and myHero:CanUseSpell(Spell(_Q)) == READY then
    if DistanceMonster <= RangeSmite and obj.health <= GetSmiteDamage() + GetDamageSpell() then
	CastSpell(Spell(_Q), obj)
	end
	return
	end

	if myHero:CanUseSpell(Smite) == READY then
    if DistanceMonster <= RangeSmite and obj.health <= GetSmiteDamage() then
    CastSpell(Smite, obj)
    end

	elseif myHero:CanUseSpell(Spell(_Q)) == READY then
    if DistanceMonster <= RangeSmite and obj.health <= GetDamageSpell() then
	CastSpell(Spell(_Q), obj)
	end
	end
end

function SmiteWMonster(obj)
    local DistanceMonster = GetDistance(obj)
    if myHero:CanUseSpell(Smite) == READY and myHero:CanUseSpell(Spell(_W)) == READY then
    if DistanceMonster <= RangeSmite and obj.health <= GetSmiteDamage() + GetDamageSpell() then
	CastSpell(Spell(_W), obj)
	end
	return
	end

	if myHero:CanUseSpell(Smite) == READY then
    if DistanceMonster <= RangeSmite and obj.health <= GetSmiteDamage() then
    CastSpell(Smite, obj)
    end

	elseif myHero:CanUseSpell(Spell()) == READY then
    if DistanceMonster <= RangeSmite and obj.health <= GetDamageSpell() then
	CastSpell(Spell(_W), obj)
	end
	end
end

function SmiteEMonster(obj)
    local DistanceMonster = GetDistance(obj)
    if myHero:CanUseSpell(Smite) == READY and myHero:CanUseSpell(Spell(_E)) == READY then
    if DistanceMonster <= RangeSmite and obj.health <= GetSmiteDamage() + GetDamageSpell() then
	CastSpell(Spell(_E), obj)
	end
	return
	end

	if myHero:CanUseSpell(Smite) == READY then
    if DistanceMonster <= RangeSmite and obj.health <= GetSmiteDamage() then
    CastSpell(Smite, obj)
    end

	elseif myHero:CanUseSpell(Spell(_E)) == READY then
    if DistanceMonster <= RangeSmite and obj.health <= GetDamageSpell() then
	CastSpell(Spell(_E), obj)
	end
	end
end

function SmiterMonster(obj)
    local DistanceMonster = GetDistance(obj)
    if myHero:CanUseSpell(Smite) == READY and myHero:CanUseSpell(Spell(_R)) == READY then
    if DistanceMonster <= RangeSmite and obj.health <= GetSmiteDamage() + GetDamageSpell() then
	CastSpell(Spell(_R), obj)
	end
	return
	end

	if myHero:CanUseSpell(Smite) == READY then
    if DistanceMonster <= RangeSmite and obj.health <= GetSmiteDamage() then
    CastSpell(Smite, obj)
    end

	elseif myHero:CanUseSpell(Spell(_R)) == READY then
    if DistanceMonster <= RangeSmite and obj.health <= GetDamageSpell() then
	CastSpell(Spell(_R), obj)
	end
	end
end

function OnDraw()
	if myHero.dead then return end

	if HSMenu.rangeSmite and myHero:CanUseSpell(Smite) == READY and HSMenu.SmiteActive then
			DrawCircle(myHero.x, myHero.y, myHero.z, 550, RGB(100, 44, 255))
		end
		if HSMenu.rangeSmite then
			if drawMinion and GetDistance(drawMinion) <= 550 then
				self.drawDamage = drawMinion.health - GetSmiteDmg
				if drawMinion.health > GetSmiteDmg then
					DrawText(tostring(math.ceil(self.drawDamage)),drawMinion.x, drawMinion.y+450, drawMinion.z, 24, 0xFFFF0000)
				else
					DrawText("Smitable",drawMinion.x,drawMinion.y+450, _G.drawMinion.z, 24, 0xff00ff00)
				end
			end
		end
	
end

function FindUpdates()
	if not autoupdate then return end
	local ServerVersionDATA = GetWebResult(serveradress , scriptadress.."/HeRo Smite.version")
	if ServerVersionDATA then
		local ServerVersion = tonumber(ServerVersionDATA)
		if ServerVersion then
			if ServerVersion > tonumber(LocalVersion) then
			PrintChat("<font color='#FF0000'><b>[HeRo Smite] </b></font>".."<font color='#00BFFF'><b>Updating, don't press F9.</b></font>")
			Update()
			else
			PrintChat("<font color='#FF0000'><b>[HeRo Smite] </b></font>".."<font color='#00BFFF'><b>You have the latest version.</b></font>")
			end
		else
		PrintChat("<font color='#FF0000'><b>[HeRo Smite] </b></font>".."<font color='#00BFFF'><b>An error occured, while updating, please reload.</b></font>")
		end
	else
	PrintChat("<font color='#FF0000'><b>[HR Smite] </b></font>".."<font color='#00BFFF'><b>Could not connect to update Server.</b></font>")
	end
end

function Update()
	DownloadFile("http://"..serveradress..scriptadress.."/HeRo Smite.lua",SCRIPT_PATH.."HeRo Smite.lua", function ()
	PrintChat("<font color='#FF0000'><b>[HeRo Smite] </b></font>".."<font color='#00BFFF'><b>Updated, press 2xF9.</b></font>")
	end)
end
